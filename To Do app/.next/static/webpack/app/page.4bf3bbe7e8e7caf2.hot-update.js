"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/storage.ts":
/*!****************************!*\
  !*** ./src/lib/storage.ts ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   storage: function() { return /* binding */ storage; }\n/* harmony export */ });\nconst STORAGE_KEYS = {\n    TASKS: \"todo-app-tasks\",\n    CATEGORIES: \"todo-app-categories\",\n    USER_PREFERENCES: \"todo-app-preferences\",\n    TEMPLATES: \"todo-app-templates\",\n    POMODORO_SESSIONS: \"todo-app-pomodoro\"\n};\nclass LocalStorage {\n    getTasks() {\n        if (!this.isClient) return [];\n        try {\n            const tasks = localStorage.getItem(STORAGE_KEYS.TASKS);\n            if (!tasks) return [];\n            return JSON.parse(tasks).map((task)=>({\n                    ...task,\n                    createdAt: new Date(task.createdAt),\n                    updatedAt: new Date(task.updatedAt),\n                    dueDate: task.dueDate ? new Date(task.dueDate) : undefined\n                }));\n        } catch (error) {\n            console.error(\"Error loading tasks:\", error);\n            return [];\n        }\n    }\n    saveTasks(tasks) {\n        if (!this.isClient) return;\n        try {\n            localStorage.setItem(STORAGE_KEYS.TASKS, JSON.stringify(tasks));\n        } catch (error) {\n            console.error(\"Error saving tasks:\", error);\n        }\n    }\n    getCategories() {\n        if (!this.isClient) return this.getDefaultCategories();\n        try {\n            const categories = localStorage.getItem(STORAGE_KEYS.CATEGORIES);\n            if (!categories) return this.getDefaultCategories();\n            return JSON.parse(categories);\n        } catch (error) {\n            console.error(\"Error loading categories:\", error);\n            return this.getDefaultCategories();\n        }\n    }\n    saveCategories(categories) {\n        if (!this.isClient) return;\n        try {\n            localStorage.setItem(STORAGE_KEYS.CATEGORIES, JSON.stringify(categories));\n        } catch (error) {\n            console.error(\"Error saving categories:\", error);\n        }\n    }\n    getUserPreferences() {\n        if (!this.isClient) return this.getDefaultPreferences();\n        try {\n            const preferences = localStorage.getItem(STORAGE_KEYS.USER_PREFERENCES);\n            if (!preferences) return this.getDefaultPreferences();\n            return JSON.parse(preferences);\n        } catch (error) {\n            console.error(\"Error loading user preferences:\", error);\n            return this.getDefaultPreferences();\n        }\n    }\n    saveUserPreferences(preferences) {\n        if (!this.isClient) return;\n        try {\n            localStorage.setItem(STORAGE_KEYS.USER_PREFERENCES, JSON.stringify(preferences));\n        } catch (error) {\n            console.error(\"Error saving user preferences:\", error);\n        }\n    }\n    getTemplates() {\n        if (!this.isClient) return [];\n        try {\n            const templates = localStorage.getItem(STORAGE_KEYS.TEMPLATES);\n            if (!templates) return [];\n            return JSON.parse(templates).map((template)=>({\n                    ...template,\n                    createdAt: new Date(template.createdAt)\n                }));\n        } catch (error) {\n            console.error(\"Error loading templates:\", error);\n            return [];\n        }\n    }\n    saveTemplates(templates) {\n        if (!this.isClient) return;\n        try {\n            localStorage.setItem(STORAGE_KEYS.TEMPLATES, JSON.stringify(templates));\n        } catch (error) {\n            console.error(\"Error saving templates:\", error);\n        }\n    }\n    getPomodoroSessions() {\n        if (!this.isClient) return [];\n        try {\n            const sessions = localStorage.getItem(STORAGE_KEYS.POMODORO_SESSIONS);\n            if (!sessions) return [];\n            return JSON.parse(sessions).map((session)=>({\n                    ...session,\n                    startTime: new Date(session.startTime),\n                    endTime: session.endTime ? new Date(session.endTime) : undefined\n                }));\n        } catch (error) {\n            console.error(\"Error loading pomodoro sessions:\", error);\n            return [];\n        }\n    }\n    savePomodoroSessions(sessions) {\n        if (!this.isClient) return;\n        try {\n            localStorage.setItem(STORAGE_KEYS.POMODORO_SESSIONS, JSON.stringify(sessions));\n        } catch (error) {\n            console.error(\"Error saving pomodoro sessions:\", error);\n        }\n    }\n    // Enhanced preferences with new features\n    getDefaultPreferences() {\n        return {\n            theme: \"system\",\n            defaultCategory: \"Personal\",\n            sortBy: \"dueDate\",\n            sortOrder: \"asc\",\n            notifications: true,\n            soundEnabled: true,\n            pomodoroLength: 25,\n            shortBreakLength: 5,\n            longBreakLength: 15\n        };\n    }\n    // Export/Import functionality\n    exportData() {\n        const data = {\n            tasks: this.getTasks(),\n            categories: this.getCategories(),\n            templates: this.getTemplates(),\n            preferences: this.getUserPreferences(),\n            exportDate: new Date().toISOString()\n        };\n        return JSON.stringify(data, null, 2);\n    }\n    importData(jsonData) {\n        try {\n            const data = JSON.parse(jsonData);\n            if (data.tasks) this.saveTasks(data.tasks);\n            if (data.categories) this.saveCategories(data.categories);\n            if (data.templates) this.saveTemplates(data.templates);\n            if (data.preferences) this.saveUserPreferences(data.preferences);\n            return true;\n        } catch (error) {\n            console.error(\"Error importing data:\", error);\n            return false;\n        }\n    }\n    clearAllData() {\n        if (!this.isClient) return;\n        Object.values(STORAGE_KEYS).forEach((key)=>{\n            localStorage.removeItem(key);\n        });\n    }\n    getDefaultCategories() {\n        return [\n            {\n                id: \"work\",\n                name: \"Work\",\n                color: \"#3b82f6\",\n                icon: \"\\uD83D\\uDCBC\"\n            },\n            {\n                id: \"personal\",\n                name: \"Personal\",\n                color: \"#10b981\",\n                icon: \"\\uD83C\\uDFE0\"\n            },\n            {\n                id: \"shopping\",\n                name: \"Shopping\",\n                color: \"#f59e0b\",\n                icon: \"\\uD83D\\uDED2\"\n            },\n            {\n                id: \"health\",\n                name: \"Health\",\n                color: \"#ef4444\",\n                icon: \"\\uD83C\\uDFE5\"\n            },\n            {\n                id: \"learning\",\n                name: \"Learning\",\n                color: \"#8b5cf6\",\n                icon: \"\\uD83D\\uDCDA\"\n            }\n        ];\n    }\n    constructor(){\n        this.isClient = \"object\" !== \"undefined\";\n    }\n}\nconst storage = new LocalStorage();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/storage.ts\n"));

/***/ })

});